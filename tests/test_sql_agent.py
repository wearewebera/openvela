import logging

from openvela.agents import Agent, SQLAgent, SupervisorAgent
from openvela.llms import GroqModel, OllamaModel
from openvela.tasks import Task
from openvela.workflows import AutoSelectWorkflow

# Configure logging for visibility
logging.basicConfig(level=logging.INFO)

# Initialize the GroqModel with your valid API key
model_instance = GroqModel(
    api_key="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"
)
# model_instance = OllamaModel()

# Define the schema summary for context
schema_summary = """
Tables:
  - users (user_id, username, email, created_at)
  - addresses (address_id, user_id, address_line1, address_line2, city, state, zip_code, country, is_primary)
  - categories (category_id, category_name, parent_category_id)
  - products (product_id, category_id, product_name, description, price, stock, created_at)
"""

# Define SQLAgents specialized in each table
users_agent = SQLAgent(
    settings={
        "name": "UsersAgent",
        "prompt": "Generate a read-only SQL query for the users table.",
        "description": "Specialized Agent for generating read-only SQL queries for the users table.",
    },
    model=model_instance,
    sql_dialect="sqlite",
    sqlalchemy_engine_url="sqlite:///example.db",
    database_structure=schema_summary,
)

addresses_agent = SQLAgent(
    settings={
        "name": "AddressesAgent",
        "prompt": "Generate a read-only SQL query for the addresses table.",
        "description": "Specialized Agent for generating read-only SQL queries for the addresses table.",
    },
    model=model_instance,
    sql_dialect="sqlite",
    sqlalchemy_engine_url="sqlite:///example.db",
    database_structure=schema_summary,
)

categories_agent = SQLAgent(
    settings={
        "name": "CategoriesAgent",
        "prompt": "Generate a read-only SQL query for the categories table.",
        "description": "Specialized Agent for generating read-only SQL queries for the categories table.",
    },
    model=model_instance,
    sql_dialect="sqlite",
    sqlalchemy_engine_url="sqlite:///example.db",
    database_structure=schema_summary,
)

products_agent = SQLAgent(
    settings={
        "name": "ProductsAgent",
        "prompt": "Generate a read-only SQL query for the products table.",
        "description": "Specialized Agent for generating read-only SQL queries for the products table.",
    },
    model=model_instance,
    sql_dialect="sqlite",
    sqlalchemy_engine_url="sqlite:///example.db",
    database_structure=schema_summary,
)

# Define the SupervisorAgent
supervisor = SupervisorAgent(
    settings={
        "name": "SupervisorAgent",
        "prompt": "Your function is to select the best SQL Agents for each topic and at the end of all you can select the formatter to bring a good question.",
        "description": "Supervises the workflow and manages the sequence of SQLAgents.",
    },
    model=model_instance,
    agent_type="selector",
)

formatter_agent = Agent(
    settings={
        "name": "FormatterAgent",
        "prompt": "Format the SQL queries generated by the SQLAgents to a good and cohesive format that allows users to understand well.",
        "description": "Formats the SQL queries to produce a cohesive result.",
    },
)

# Define the task
task = Task(prompt="Give me all the users and each adresses")

# Create the AutoSelectWorkflow
workflow = AutoSelectWorkflow(
    task=task,
    agents=[users_agent, addresses_agent, categories_agent, products_agent],
    supervisor=supervisor,
    validate_output=False,
    max_attempts=3,
)

# Run the Workflow and Print the Final Output
final_output = workflow.run()
print("Final Output:\n", final_output)
